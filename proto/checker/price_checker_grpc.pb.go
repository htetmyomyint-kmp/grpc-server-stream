// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package checker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceCheckerClient is the client API for PriceChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceCheckerClient interface {
	CheckPrice(ctx context.Context, in *PCRequest, opts ...grpc.CallOption) (PriceChecker_CheckPriceClient, error)
}

type priceCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceCheckerClient(cc grpc.ClientConnInterface) PriceCheckerClient {
	return &priceCheckerClient{cc}
}

func (c *priceCheckerClient) CheckPrice(ctx context.Context, in *PCRequest, opts ...grpc.CallOption) (PriceChecker_CheckPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceChecker_ServiceDesc.Streams[0], "/PriceChecker/CheckPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceCheckerCheckPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceChecker_CheckPriceClient interface {
	Recv() (*PCResponse, error)
	grpc.ClientStream
}

type priceCheckerCheckPriceClient struct {
	grpc.ClientStream
}

func (x *priceCheckerCheckPriceClient) Recv() (*PCResponse, error) {
	m := new(PCResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceCheckerServer is the server API for PriceChecker service.
// All implementations should embed UnimplementedPriceCheckerServer
// for forward compatibility
type PriceCheckerServer interface {
	CheckPrice(*PCRequest, PriceChecker_CheckPriceServer) error
}

// UnimplementedPriceCheckerServer should be embedded to have forward compatible implementations.
type UnimplementedPriceCheckerServer struct {
}

func (UnimplementedPriceCheckerServer) CheckPrice(*PCRequest, PriceChecker_CheckPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckPrice not implemented")
}

// UnsafePriceCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceCheckerServer will
// result in compilation errors.
type UnsafePriceCheckerServer interface {
	mustEmbedUnimplementedPriceCheckerServer()
}

func RegisterPriceCheckerServer(s grpc.ServiceRegistrar, srv PriceCheckerServer) {
	s.RegisterService(&PriceChecker_ServiceDesc, srv)
}

func _PriceChecker_CheckPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PCRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceCheckerServer).CheckPrice(m, &priceCheckerCheckPriceServer{stream})
}

type PriceChecker_CheckPriceServer interface {
	Send(*PCResponse) error
	grpc.ServerStream
}

type priceCheckerCheckPriceServer struct {
	grpc.ServerStream
}

func (x *priceCheckerCheckPriceServer) Send(m *PCResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PriceChecker_ServiceDesc is the grpc.ServiceDesc for PriceChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PriceChecker",
	HandlerType: (*PriceCheckerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckPrice",
			Handler:       _PriceChecker_CheckPrice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/price_checker.proto",
}
